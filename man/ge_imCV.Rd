% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ge_imCV.R
\name{ge_imCV}
\alias{ge_imCV}
\title{Cross validation comparison of geim models}
\usage{
ge_imCV(
  X,
  p,
  formula_list,
  cv.n = 50,
  cv.s = 0.8,
  method = c("gam", "glm", "limma"),
  dim_red = c("pca", "ica"),
  nc = ncol(X),
  to_compute = c("aRE", "MSE", "aRMSE"),
  nb.cores = 2,
  verbose = T,
  ...
)
}
\arguments{
\item{X}{the gene expression matrix (genes as rows, samples as columns)}

\item{p}{a dataframe with the pheno data used in the formula (samples as rows) e.g. time, covariates.}

\item{formula_list}{a list of model formulas to compare, which must start with 'X ~' (as passed on to \code{\link{ge_im}}).}

\item{cv.n}{number of cross-validation repeats.}

\item{cv.s}{ratio of samples to use for training set. If \code{cv.s > 1}, then \code{cv.s} samples are used for the training set.}

\item{method}{the model type to fit, one of c("gam", "glm", "limma").}

\item{dim_red}{the dimension reduction method to use for interpolation, one of c("pca", "ica"), ignored when method is "limma".}

\item{nc}{the number of components to extract from \code{X} for interpolation, defaults to \code{ncol(X)}, ignored method is "limma".}

\item{to_compute}{the model performance indices to compute during CV (see \code{\link{mperf}})}

\item{nb.cores}{the number of cores to use for parallel execution.}

\item{verbose}{boolean ; if TRUE, displays messages of the various steps of the method.}

\item{...}{extra arguments passed on to model functions.}
}
\description{
This function performs cross-validation (CV) with the aim of finding the optimal model from the given formulas.
Parameters are explored through the given list of formulas (\emph{e.g}, 'df=3' or 'df=4' must be specified in the formulas).
}
\details{
The CV training sets are defined to be representative of all variables included in the models.
This is done with a function attributed to GitHub user mrdwab \url{https://gist.github.com/mrdwab/6424112}.

Note that only one method/dimension reduction can be used at a time through this function.
}
\examples{
\donttest{
requireNamespace('wormRef', quietly = TRUE)
requireNamespace('stats', quietly = TRUE)

# gene expression data
X <- wormRef::Cel_larval$g

# pheno data (e.g time, batch)
p <- wormRef::Cel_larval$p

# do a pca & select nb of components to use for interpol
pca <- stats::prcomp(X, rank = 20)
nc <- sum(summary(pca)$importance[3, ] < .999) + 1


# find optimal spline type
# setup formulas
smooths <- c('bs', 'tp', 'cr', 'ds')
flist <- as.list(paste0('X ~ s(age, bs = \'', smooths, '\') + cov'))
# do CV
cvres <- ge_imCV(X = scale(X), p = p, formula_list = flist,
                 cv.n = 20, nc = nc)
# check results
plot(cvres, names.arrange = 4) # lowest pred error with 'ds' spline

# build model & interpolation data
m <- ge_im(X = X, p = p, formula = 'X ~ s(age, bs = \'ds\') + cov', nc = nc)
n.inter = 100
ndat <- data.frame(age = seq(min(p$age), max(p$age), l = n.inter),
                   cov = rep(p$cov[1], n.inter))

# check interpolation on pca components
pred_pca <- predict(m, ndat, as.c = T)

par(mfrow = c(2,2))
invisible(sapply(seq_len(nc), function(i){
  plot(p$age, pca$rotation[, i], xlab = 'age', ylab = 'PC', main = paste0('PC',i),
       lwd = (p$cov == p$cov[1]) + 1)
  points(ndat$age, pred_pca[, i], type = 'l', lwd = 2)
}))

# get interpolated GE matrix, as a reference
r_X <- list(interpGE = predict(m, ndat), time.series = ndat$age)

# test
ae_X <- ae(X, r_X$interpGE, r_X$time.series)
par(mfrow = c(1,1))
plot(p$age, ae_X$age.estimates[,1])


}
}
