% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plsr_interpol.R
\name{plsr_interpol}
\alias{plsr_interpol}
\title{Interpolation of gene expression on time series from reference data}
\usage{
plsr_interpol(
  X,
  time.series,
  df,
  covar = NULL,
  topred = NULL,
  n.inter = 200,
  tmin = min(time.series),
  tmax = max(time.series),
  scale = T,
  knots = NULL,
  plsr.nc = NULL,
  return.model = FALSE
)
}
\arguments{
\item{X}{gene expression matrix of reference time series, genes as rows, (ordered) individuals as columns.}

\item{time.series}{timepoints of the reference (\code{X}).}

\item{df}{the df parameter passed on to the \code{\link[splines]{ns}} function.}

\item{covar}{a covariate to include in the model (\emph{e.g} batch).}

\item{topred}{a level of \code{covar} to use for model predictions ; defaults to the first level.}

\item{n.inter}{number of timepoints to return in interpolated data, defaults to 200.}

\item{tmin, tmax}{defaults to min and max of \code{time.series} ; start and end times of interpolated time series.}

\item{scale}{defaults to TRUE, passed on to the \code{\link[pls]{plsr}} function.}

\item{knots}{defaults to NULL, passed on to the \code{\link[splines]{ns}} function.}

\item{plsr.nc}{the number of components to use for PLSR prediction. If NULL, determined by CV.}

\item{return.model}{if TRUE, returns the PLSR model object and the input df value.}
}
\description{
\emph{NOTE : this function is deprecated, it is recommended to use ge_im functions to interpolate on gene expression data}
}
\details{
This function computes the interpolated gene expression data from a reference time series.
This is done with a multi-target Partial Least Square Regression (PLSR) model, using a spline of time as descriptive variables.
}
\examples{
\donttest{
requireNamespace('wormRef', quietly = TRUE)

# gene expression data
G <- wormRef::Cel_larval$g

# pheno data (e.g time, batch)
P <- wormRef::Cel_larval$p



# find optimal spline degree of freedom for PLSR interpolation
dfCV_G <- df_CV(X = G, 
                time.series = P$age,
                covar = P$cov,
                dfs = 10:20)

# check minimum of CV error
summary(dfCV_G)
plot(dfCV_G) # min for df = 17

# perform PLSR interpolation using optimal parameter
r_G <- plsr_interpol(X = G, 
                     time.series = P$age,
                     covar = P$cov,
                     df = 17) 

}
}
